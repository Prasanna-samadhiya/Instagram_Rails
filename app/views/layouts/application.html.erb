<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Instagram" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr" crossorigin="anonymous">

    <!-- Font Awesome CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" integrity="sha512-..." crossorigin="anonymous" referrerpolicy="no-referrer" />
    
    <!-- Drop Zone CSS -->
    <link href="https://unpkg.com/dropzone@6.0.0-beta.2/dist/dropzone.css" rel="stylesheet" /> 
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%= stylesheet_link_tag :app, "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
  </head>

  <body style="background-image: linear-gradient(358deg, #f9ce34, #ee2a7b, #6228d7)">

    <!--Navigation Bar-->
    <nav class="navbar navbar-dark  sticky-top" style="background-color:lightcoral">
      <div class="container d-flex justify-content-between align-items-center">

        <!-- Logo -->
        <a class="navbar-brand d-flex align-items-center gap-2" href="<%= root_path %>">
          <span class="fa-stack">
            <i class="fas fa-circle fa-stack-2x text-dark"></i>
            <i class="fas fa-camera fa-stack-1x fa-inverse"></i>
          </span>
          <span class="text-white">Instagram</span>
        </a>

        <!-- Search Form -->
        <div class="m-auto" style="width:500px">
          <%= form_with url: search_path, method: :get, local: true, class: 'form-inline' do |form| %>
            <%= form.text_field :query, value: params[:query], class: 'form-control mr-sm-2', placeholder: '#search' %>
          <% end %>
        </div>

        <!-- User Section -->
        <% if user_signed_in? %>
          <div class="d-flex align-items-center gap-3 text-white">

            <%= button_tag type: "button", class: "btn btn-link p-0 m-0 text-white open-post-modal", style: "text-decoration: none;" do %>
              <i class="fas fa-plus fa-xl"></i>
            <% end %>

            <a href="<%= user_follows_path(current_user) %>" class="text-white">
              <i class="fa fa-compass"></i>
            </a>

            <a href="<%= home_show_path %>" class="text-white">
              <i class="fa fa-heart"></i>
            </a>

            <a href="<%= user_path(current_user) %>" class="text-white">
              <i class="fa fa-user"></i>
            </a>

            <%= button_to destroy_user_session_path,
                method: :delete,
                class: "btn btn-link p-0 m-0 text-white",
                style: "text-decoration: none;",
                data: { confirm: "Are you sure you want to sign out?" } do %>
              <i class="fa fa-sign-out"></i>
            <% end %>
          </div>
        <% else %>
          <div>
            <a href="<%= new_user_session_path %>" class="text-white">
              <i class="fa fa-sign-in"></i>
            </a>
          </div>
        <% end %>

      </div>
    </nav>

    <!--Main content-->
    <main class="container" style="padding-top: 30px; min-height: 500px;">
          <%= yield %>
            <div id="dynamicModalForm" style="display: none; position: fixed; top: 20%; left: 50%; transform: translateX(-50%); background: white; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px #000; z-index: 1000;">
            </div>
              <div id="modalOverlay" style="display: none; position: fixed; top:0; left:0; width:100%; height:100%; background-color: rgba(0,0,0,0.4); z-index: 999;">
              </div>
              <% if flash[:notice] || flash[:alert] %>
                <div aria-live="polite" aria-atomic="true" class="position-relative">
                  <div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1055;">
                    <div class="toast align-items-center text-white <%= flash[:alert] ? 'bg-danger' : 'bg-success' %> border-0" role="alert" aria-live="assertive" aria-atomic="true" id="flashToast">
                      <div class="d-flex">
                        <div class="toast-body">
                          <%= flash[:notice] || flash[:alert] %>
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                      </div>
                    </div>
                  </div>
                </div>
              <% end %>
    </main>
    </div>

    <!--Footer-->
    <footer class="container footer ">
      <nav class="navbar d-flex">
        <ul class="list-unstyled d-flex flex-wrap gap-3">
          <li>ABOUT US</li>
          <li>SUPPORT</li>
          <li>PRESS</li>
          <li>API</li>
          <li>JOBS</li>
          <li>PRIVACY</li>
          <li>TERMS</li>
          <li>DIRECTORY</li>
          <li>PROFILES</li>
          <li>HASHTAGS</li>
          <li>LANGUAGE</li>
        </ul>
        <p class="text-muted">Â© 2018 INSTAGRAM</p>
      </nav>
    </footer>

     <!-----modal start----->
  <div id="post-modal" class="modal" style="display: none;">
  <div class="modal-content">
    <span class="close-btn" id="close-post-modal">&times;</span>

    <h2>Create a New Post</h2>

    <%= form_for Post.new, html: { multipart: true, id: "post-upload-form" } do |f| %>
      <div class="form-group mb-3">
        <%= f.label :description, "Description", class: "form-label" %>
        <%= f.text_field :description, class: "form-control", placeholder: "Write your post..." %>
      </div>

      <div class="form-group mb-3">
        <label class="form-label">Upload Image</label>
        <div id="my-dropzone" class="dropzone"></div>

        <!-- Fallback for non-JS users -->
        <noscript>
          <%= f.label :image, "Upload Image", class: "form-label" %>
          <%= f.file_field :image, class: "form-control" %>
        </noscript>
      </div>

      <% if current_user %>
        <%= f.hidden_field :user_id, value: current_user.id %>
      <% end %>

      <div class="text-center mt-4">
        <%= f.submit "Create Post", class: "btn btn-success px-4" %>
      </div>
    <% end %>
  </div>
</div>
  <!-----modal close----->

    

    <!-- Bootstrap JS Bundle -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js" ... ></script>
    <script src="https://unpkg.com/dropzone@6.0.0-beta.2/dist/dropzone-min.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        Dropzone.autoDiscover = false;

        const modal = document.getElementById("post-modal");
        const openBtn = document.querySelector(".open-post-modal");
        const closeBtn = document.getElementById("close-post-modal");
        const dropzoneTarget = document.getElementById("my-dropzone");

        // Open modal
        if (openBtn) {
          openBtn.addEventListener("click", function (e) {
            e.preventDefault();
            modal.style.display = "block";

            // Prevent re-initialization
            if (!dropzoneTarget.classList.contains("dz-initialized")) {
              dropzoneTarget.classList.add("dz-initialized");

              new Dropzone("#my-dropzone", {
                url: "/uploads", // Replace this with your actual upload endpoint if separate
                paramName: "post[image]",
                maxFiles: 1,
                acceptedFiles: "image/*",
                addRemoveLinks: true,
                dictDefaultMessage: "Drag an image or click to upload"
              });
            }
          });
        }

        // Close modal
        if (closeBtn) {
          closeBtn.addEventListener("click", function () {
            modal.style.display = "none";
          });
        }

        // Close modal when clicking outside
        window.addEventListener("click", function (event) {
          if (event.target === modal) {
            modal.style.display = "none";
          }
        });
      });
    </script>
    <!-- Firebase App (the core Firebase SDK) -->
    <!-- Firebase App (Core) -->
    <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app-compat.js"></script>

    <!-- Firebase Auth (optional) -->
    <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth-compat.js"></script>

    <!-- Firebase Firestore -->
    <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore-compat.js"></script>

    <script type="module">
      // Import the functions you need from the SDKs you need
      import { initializeApp } from "https://www.gstatic.com/firebasejs/11.10.0/firebase-app.js";
      // TODO: Add SDKs for Firebase products that you want to use
      // https://firebase.google.com/docs/web/setup#available-libraries

      // Your web app's Firebase configuration
      const firebaseConfig = {
      };

      // Initialize Firebase
      const app = initializeApp(firebaseConfig);
      const db = getFirestore(app);

      // Chat functions
      const chatBox = document.getElementById("chat-box");
      const chatInput = document.getElementById("chat-input");
      const chatButton = document.getElementById("chat-send");

      // Listen to messages
      const q = query(collection(db, "messages"), orderBy("timestamp"));
      onSnapshot(q, (snapshot) => {
        chatBox.innerHTML = "";
        snapshot.forEach(doc => {
          const data = doc.data();
          chatBox.innerHTML += `<div><strong>${data.name}</strong>: ${data.text}</div>`;
        });
      });

      chatButton.addEventListener("click", async () => {
        if (chatInput.value.trim() !== "") {
          await addDoc(collection(db, "messages"), {
            name: "You",
            text: chatInput.value,
            timestamp: new Date()
          });
          chatInput.value = "";
        }
      });
      prompt("Firebase version:", firebase?.SDK_VERSION || "Firebase not loaded");

    </script>
    <%= javascript_include_tag "dropzone_init", defer: true %>
    
    
<!-- Firebase Core SDK -->
<script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app-compat.js"></script>

<!-- Firebase Auth SDK (optional, for user auth if needed) -->
<script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth-compat.js"></script>

<!-- Firestore SDK -->
<script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore-compat.js"></script>

<!-- Initialize Firebase -->
<script>
  // Your Firebase configuration (Replace with your actual config values)
  const firebaseConfig = {
   
  };

  // Initialize Firebase
  firebase.initializeApp(firebaseConfig);

  // Initialize Firestore
  const db = firebase.firestore();

    window.testFirebase = async function () {
    try {
      const docRef = await db.collection("test").add({
        name: "Firebase check",
        timestamp: new Date()
      });
      alert("â Firebase is working! Doc ID: " + docRef.id);
    } catch (e) {
      console.error("â Firebase error:", e);
      alert("Firebase error: Check console for details");
    }
  };
</script>

<button onclick="testFirebase()" style="padding:10px 20px; margin-top: 20px;">Test Firebase</button>

  
  </body>
</html>
