<style>
  body {
    background: linear-gradient(135deg, #f9ce34, #ee2a7b, #6228d7);
    background-attachment: fixed;
    background-size: cover;
    color: #fff;
  }

  .insta__container {
    background-color: white;
    border-radius: 10px;
    padding: 10px;
    margin-bottom: 20px;
    color: black;
  }

  .chat-user.selected {
    background-color: #e6e6e6 !important;
    border-left: 4px solid #ee2a7b;
  }

  .chat-user:focus,
  .chat-user:active,
  .chat-user.active {
    outline: none;
    box-shadow: none;
  }

  .card {
    background-color: white;
  }

  .modal-content {
    background-color: white;
    color: black;
  }

  .form-control {
    background-color: #f5f5f5;
    color: black;
  }

  .btn-primary {
    background-color: #ee2a7b;
    border-color: #ee2a7b;
  }

  .btn-success {
    background-color: #6228d7;
    border-color: #6228d7;
  }

  .btn-outline-primary {
    border-color: #f9ce34;
    color: #f9ce34;
  }

  .btn-outline-primary:hover {
    background-color: #f9ce34;
    color: white;
  }

  .btn-outline-danger {
    border-color: #ee2a7b;
    color: #ee2a7b;
  }

  .btn-outline-danger:hover {
    background-color: #ee2a7b;
    color: white;
  }
</style>

<style>
  .chat-bubble {
    max-width: 70%;
    padding: 10px 14px;
    border-radius: 18px;
    margin-bottom: 10px;
    display: inline-block;
    font-size: 14px;
    line-height: 1.4;
  }

  .chat-bubble.mine {
    background-color: #ee2a7b;
    color: white;
    border-bottom-right-radius: 4px;
    margin-left: auto;
  }

  .chat-bubble.theirs {
    background-color: #f0f0f0;
    color: black;
    border-bottom-left-radius: 4px;
    margin-right: auto;
  }

  .chat-message-row {
    display: flex;
    align-items: flex-end;
    gap: 10px;
  }

  .chat-message-row.theirs {
    justify-content: flex-start;
  }

  .chat-message-row.mine {
    justify-content: flex-end;
  }

  .chat-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
  }
</style>



<% if user_signed_in? %>
  <div style= "display:flex;flex-direction:row;justify-content:space-between; ">
    <div style = "height:550px;display:flex;flex-direction:column;overflow-y:auto;scrollbar-width: none;gap:20px;margin-bottom:50px;margin-left:100px ">
      <% @posts.each do |post| %>
        <div style="width:340px">
          <div class="insta__container insta__post">
          <!-- Insta-post start -->
          <section class="insta__header insta__post_header">
              <div class="insta__icon-wrap insta__post_icon-wrap">
                <% if post.user.avatar.attached? %>
                  <%= link_to user_path(post.user) do %>
                    <%= image_tag post.user.avatar ,class: "insta__mini_icon insta__post_icon" %>
                  <% end %>  
                <% end %>
              </div>
              
              <span class="insta__post_text-bold">
                  <%= link_to post.user.name, user_path(post.user), style: 'text-decoration:none;color:black;' %>
              </span>

              <!-- follow/unfollow button -->
              <div style="margin-left:100px;">  
                <% if current_user != post.user %>
                  <% if current_user.following?(post.user) %>
                    <%= button_to "Unfollow", unfollow_user_path(post.user), method: :post,class: "btn btn-outline-danger btn-sm" %>
                  <% else %>
                    <%= button_to "Follow", follow_user_path(post.user), method: :post,class: "btn btn-outline-primary btn-sm" %>
                  <% end %>
                <% end %>
              </div>
          </section>

          <!-- Post Image -->
          <section class="insta__post_photos">
              <% if post.image&.attached? %>
              <%= image_tag url_for(post.image), class: "insta__post_photo", alt: "post image" %>
              <% else %>
              <img src="https://www.bing.com/th/id/OIP.tZq4FbHI-2VuBSGkHjfyfAHaHa?w=157&h=211&c=8&rs=1&qlt=90&o=6&dpr=1.3&pid=3.1&rm=2" class="insta__post_photo" alt="placeholder">
              <% end %>
          </section>
          

          <!----------------->
          <%#= turbo_stream_from "posts" %>
          <%#= turbo_frame_tag "post_#{post.id}_likes" do %>
            <%#= render partial: "posts/likes", locals: { post: post } %>
          <%# end %>
          <!-----------------> 

          <!-- Post Buttons -->
          <section class="insta__post_btns">
              <div class="insta__post_btns-left">
              <div class="d-flex justify-content-between align-items-center px-3 py-2 gap-4" style="font-size: 1.4rem;">
                <% if current_user.likes.exists?(post_id: post.id) %>
                  <%= turbo_frame_tag "post_#{post.id}_likes" do %>
                    <%= button_to dislike_posts_path(post), method: :post,style:"", class: "btn p-0 border-0 bg-transparent text-danger",data: { turbo: "replace" }  do %>
                      <i class="fas fa-heart fa-2x"></i> 
                    <% end %>
                  <% end %>
                <% else %>
                  <%= turbo_frame_tag "post_#{post.id}_likes" do %>
                    <%= button_to like_posts_path(post), method: :post, class: "btn p-0 border-0 bg-transparent", data: { turbo: "replace" } do %>
                      <i class="far fa-heart fa-2x"></i> 
                    <% end %>
                  <% end %>  
                <% end %>
                <%= button_to like_posts_path(post), method: :post, class: "btn p-0 border-0 bg-transparent" do %>
                    <i class="far fa-paper-plane fa-2x"></i>
                <% end %>
                <button class="btn p-0 border-0 bg-transparent toggle-comments-btn" data-bs-toggle="collapse" data-bs-target="#comments-<%= post.id %>">
                  <i class="far fa-comment fa-2x"></i>
                </button>
              </div>
          </section>

          <!-- Post Comments -->
          <section class="insta__post_comm insta__post_comm_aut">
            <%= turbo_frame_tag "post_#{post.id}_likes" do %>
              <span class="insta__post_text-bold" data-turbo-frame>
                <%= post.likes.count %> liked and <%= post.comments.select { |c| c.parent_id.nil? }.count%> commented on this post
              </span>
              <div class="insta__post_comm_author">
                <span class="insta__post_text-bold">
                  <%= post.user.name %>
                </span>
                <% post.description.to_s.split(' ').each do |word| %>
                  <% if word.start_with?('#') %>
                    <%= link_to word, search_path(query: word) %>
                  <% else %>
                    <%= word %>
                  <% end %>
                <% end %>
              </div>
            <% end %>
          </section>

          <!-- Comment Field -->
          
          <div class="collapse mt-2 " id="comments-<%= post.id %>">
            <%= form_with url: create_comment_path(post),method: :post, local: true do |f| %>
              <div class="input-group mt-3 mb-3">
                <%= f.text_field :content, placeholder: "Add a new comment...", class: "form-control" %>
                <%= f.submit nil, class: "btn btn-primary" do %>
                  Comment
                <% end %>
              </div>
            <% end %>
            <% post.comments.where(parent_id: nil).each do |comment| %>
              <%= render partial: 'comment', locals: { comment: comment, depth: 0 } %>
            <% end %>
          </div>
          </div>
        </div>
      <% end %>
    </div>

    <div class="row chat-container" id="chat-container" style="height: 72vh; margin-right:10px; width:1000px; padding-bottom:20px;background: #fff; border-radius: 12px; overflow: auto; scrollbar-width: none;box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
  
      <!-- Chat List -->
      <div class="col-md-4 border-end px-0 chat-sidebar" style="background-color: #fafafa;">
        <div class="p-3 border-bottom">
          <h5 class="fw-bold mb-0" style="color:black">Chats</h5>
        </div>
        <div class="list-group list-group-flush chat-user-list" style="height: calc(100% - 56px); overflow-y: auto;">
          <% @users.each do |user| %>
            <a href="#" 
              class="list-group-item list-group-item-action d-flex align-items-center gap-3 px-3 py-2 chat-user" 
              data-user-id="<%= user.id %>" 
              data-username="<%= user.username %>" 
              data-avatar="<%= user.avatar.attached? ? url_for(user.avatar) : asset_path('image.png') %>">
              <%= image_tag user.avatar.attached? ? user.avatar : "image.png", class: "rounded-circle", style: "width:50px;height:50px;" %>
              <div>
                <div class="fw-semibold"><%= user.username %></div>
                <small class="text-muted">Tap to chat</small>
              </div>
            </a>
          <% end %>
        </div>
      </div>

      <!-- Chat Window -->
      <div class="col-md-8 d-flex flex-column p-0 chat-window" id="chat-area">
        <!-- Top Bar with User Image and Name -->
        <div class="p-3 border-bottom d-flex align-items-center" style="height: 56px;">
          <img id="chat-user-img" src="" alt="User Image" class="rounded-circle me-2" width="40" height="40" style="display: none;">
          <h6 class="mb-0" id="chat-with">Select a user</h6>
        </div>

        <!-- Messages Area -->
        <div id="messages" class="flex-grow-1 p-3 chat-messages" style="overflow-y: auto; background-color: #fdfdfd;">
          <div class="text-muted text-center mt-5">No user selected</div>
        </div>

        <!-- Chat Input -->
        <div class="border-top p-3 chat-input-area">
          <%= form_with url: "#", method: :post, id: "chat-form", local: true do |f| %>
            <div class="input-group">
              <%= f.text_field :message, placeholder: "Type a message...", class: "form-control", id: "message-input", disabled: true %>
              <button class="btn btn-primary" type="submit" disabled id="send-btn">Send</button>
            </div>
          <% end %>
        </div>
      </div>

    </div>


  </div>
<% else %>
  <div  class="text-center " style="margin: 80px;">
    <h2>Welcome to the Home Page</h2>
    <p>Please sign in to create a post.</p>
    <%= image_tag "InstagramLogo2.png"  ,style:"width:120vh"%>
  </div>
<% end %>


<script>
  document.addEventListener("DOMContentLoaded", function () {
    const chatUsers = document.querySelectorAll(".chat-user");
    const chatWith = document.getElementById("chat-with");
    const messageInput = document.getElementById("message-input");
    const sendBtn = document.getElementById("send-btn");
    const chatForm = document.getElementById("chat-form");
    const messagesDiv = document.getElementById("messages");
    
    const currentUserId = "<%= current_user ? current_user.id : 0 %>";
    let selectedUserId = null;
    let unsubscribe = null; 

    function getChatId(user1, user2) {
      return [user1, user2].sort().join("_");
    }

    function renderMessage(data) {
      const div = document.createElement("div");
      const isMine = data.senderId === currentUserId;
      div.className = `my-2 ${isMine ? 'text-end' : 'text-start'}`;
      div.innerHTML = `<div class="chat-bubble ${isMine ? 'mine' : 'theirs'}">${data.text}</div>`;
      messagesDiv.appendChild(div);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    const chatUserImg = document.getElementById("chat-user-img");

    chatUsers.forEach(user => {
      user.addEventListener("click", function (e) {
        e.preventDefault();

        // Remove 'selected' class from all users
        chatUsers.forEach(u => u.classList.remove("selected"));

        // Add 'selected' class to the clicked user
        this.classList.add("selected");

        selectedUserId = this.dataset.userId;
        const username = this.querySelector(".fw-semibold").innerText;

        chatWith.innerText = `Chatting with ${username}`;
        chatWith.style.color = "black";

        // Update avatar
        const avatarUrl = this.dataset.avatar;
        if (avatarUrl && chatUserImg) {
          chatUserImg.src = avatarUrl;
          chatUserImg.style.display = "inline-block";
        }

        messageInput.disabled = false;
        sendBtn.disabled = false;
        messagesDiv.innerHTML = "";

        if (unsubscribe) unsubscribe();

        const chatId = getChatId(currentUserId, selectedUserId);

        unsubscribe = db
          .collection("chats")
          .doc(chatId)
          .collection("messages")
          .orderBy("timestamp")
          .onSnapshot(snapshot => {
            messagesDiv.innerHTML = "";
            snapshot.forEach(doc => renderMessage(doc.data()));
          });
      });
    });

    chatForm.addEventListener("submit", function (e) {
      e.preventDefault();

      const text = messageInput.value.trim();
      if (!text || !selectedUserId) return;

      const chatId = getChatId(currentUserId, selectedUserId);

      db.collection("chats")
        .doc(chatId)
        .collection("messages")
        .add({
          senderId: currentUserId,
          text: text,
          timestamp: firebase.firestore.FieldValue.serverTimestamp()
        });

      messageInput.value = "";
    });
  });
</script>
